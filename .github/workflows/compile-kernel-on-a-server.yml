#==========================================================================
# Description: Compile the kernel on a server
# Copyright (C) 2021 https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian
#==========================================================================

name: Compile the kernel on a server

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      kernel_source:
        description: "Select the kernel source"
        required: false
        default: "unifreq"
        type: choice
        options:
          - unifreq
          - codesnas
      kernel_version:
        description: "Select kernel version"
        required: false
        default: "6.12.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
          - 5.4.y_5.10.y
          - 5.15.y_6.1.y
          - 6.6.y_6.12.y
          - 5.4.y_5.10.y_5.15.y
          - 6.1.y_6.6.y_6.12.y
          - all
      kernel_auto:
        description: "Auto use the latest kernel"
        required: false
        default: true
        type: boolean
      silent_log:
        description: "Use silent logging"
        required: false
        default: true
        type: boolean
      delete_source:
        description: "Delete the source after compilation"
        required: false
        default: true
        type: boolean
      kernel_package:
        description: "Select compile package list"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - dtbs
      kernel_toolchain:
        description: "Select the compilation toolchain"
        required: false
        default: "gcc"
        type: choice
        options:
          - clang
          - gcc
          - gcc-14.2
      compress_format:
        description: "Set the initrd compression format"
        required: false
        default: "xz"
        type: choice
        options:
          - xz
          - gzip
          - zstd
          - lzma
      kernel_sign:
        description: "Set the kernel custom signature"
        required: false
        default: "-chewy"
        type: choice
        options:
          - -ophub
          - -chewy

env:
  TZ: Asia/Jakarta
  HN: chewy

jobs:
  build:
    runs-on: ubuntu-22.04-arm
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-build-armbian)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          sudo hostnamectl set-hostname "${HN}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -hT

      - name: Create a mapped directory
        id: mapped
        working-directory: /builder
        run: |
          df -hT ${PWD}
          mkdir -p /builder/{kernel,output}
          ln -sf /builder/kernel ${GITHUB_WORKSPACE}/compile-kernel/kernel
          ln -sf /builder/output ${GITHUB_WORKSPACE}/compile-kernel/output
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile the kernel [ ${{ inputs.kernel_version }} ]
        if: ${{ steps.mapped.outputs.status }} == 'success' && !cancelled()
        run: |
           ls
           echo -e "Start compile kernel..."

           # Custom kernel config files
           config_filepath="compile-kernel/tools/config"
           kernel_outpath="compile-kernel/output"
           [[ -d "${config_filepath}" ]] || mkdir -p ${config_filepath}
           if [[ -n "${{ inputs.kernel_config }}" && "${{ inputs.kernel_config }}" != "false" ]]; then
               if [[ "$(ls ${GITHUB_WORKSPACE}/${{ inputs.kernel_config }}/config-* -l 2>/dev/null | grep "^-" | wc -l)" -ne "0" ]]; then
                   echo -e "Use a custom kernel compilation template..."
                   rm -f ${config_filepath}/* 2>/dev/null && sync
                   cp -vf ${GITHUB_WORKSPACE}/${{ inputs.kernel_config }}/config-* ${config_filepath}/ 2>/dev/null && sync
                   echo -e "List of Kernel Custom Compilation Configuration Templates: \n$(ls -lh ${config_filepath} 2>/dev/null)"
               else
                   echo -e "The custom kernel compilation template path is invalid, continue to use the default template."
               fi
           else
               echo -e "Use the default kernel compilation template."
           fi

           # Custom kernel patch files
           custom_kernel_patch="compile-kernel/tools/patch"
           [[ -d "${custom_kernel_patch}" ]] || mkdir -p ${custom_kernel_patch}
           if [[ -n "${{ inputs.kernel_patch }}" && "${{ inputs.kernel_patch }}" != "false" ]]; then
               if [[ -d "${GITHUB_WORKSPACE}/${{ inputs.kernel_patch }}" ]]; then
                   echo -e "Use custom kernel patches..."
                   rm -rf ${custom_kernel_patch}/* 2>/dev/null && sync
                   cp -vrf ${GITHUB_WORKSPACE}/${{ inputs.kernel_patch }}/* -t ${custom_kernel_patch} && sync
                   echo -e "Directory of custom kernel patches: \n$(ls -lh ${custom_kernel_patch} 2>/dev/null)"
               else
                   echo -e "Invalid custom kernel patch directory, skipping."
               fi
           else
               echo -e "No custom kernel patches available."
           fi

           # You can use a Docker container on an arm64 server to compile the kernel natively with Armbian.
           # Recommended Docker repository: https://hub.docker.com/u/ophub
           # Set the Docker container name and script path
           docker_container="armbian-ophub"
           docker_script="/usr/sbin/armbian-kernel"
           echo -e "Check the system runtime environment."
           if command -v docker >/dev/null 2>&1; then
               docker_compile="$(docker ps --format '{{.Names}}' 2>/dev/null | grep -x "${docker_container}" || true)"
           else
               docker_compile=""
           fi
           [[ -n "${docker_compile}" ]] && echo -e "The docker container [ ${docker_container} ] is running."

           echo -e "Build kernel compilation command."
           make_command=""
           [[ -n "${{ inputs.kernel_source }}" ]] && make_command="${make_command} -r ${{ inputs.kernel_source }}"
           [[ -n "${{ inputs.kernel_version }}" ]] && make_command="${make_command} -k ${{ inputs.kernel_version }}"
           [[ -n "${{ inputs.kernel_auto }}" ]] && make_command="${make_command} -a ${{ inputs.kernel_auto }}"
           [[ -n "${{ inputs.kernel_package }}" ]] && make_command="${make_command} -m ${{ inputs.kernel_package }}"
           [[ -n "${{ inputs.auto_patch }}" ]] && make_command="${make_command} -p ${{ inputs.auto_patch }}"
           # [[ -n "${{ inputs.kernel_sign }}" ]] && make_command="${make_command} -n ${{ inputs.kernel_sign }}"
           [[ -n "${{ inputs.kernel_toolchain }}" ]] && make_command="${make_command} -t ${{ inputs.kernel_toolchain }}"
           [[ -n "${{ inputs.compress_format }}" ]] && make_command="${make_command} -c ${{ inputs.compress_format }}"
           [[ -n "${{ inputs.delete_source }}" ]] && make_command="${make_command} -d ${{ inputs.delete_source }}"
           [[ -n "${{ inputs.silent_log }}" ]] && make_command="${make_command} -s ${{ inputs.silent_log }}"
           read -r -a make_args <<< "${make_command}"

           # Choose Ubuntu or a Docker container to compile the kernel.
           if [[ "$(uname -m)" == "aarch64" && -n "${docker_compile}" ]]; then
               echo -e "Using the Armbian Docker image to compile the kernel."
               docker exec -i "${docker_container}" bash -c 'bash "$0" -u && bash "$0" "$@"' "${docker_script}" "${make_args[@]}"
           else
               echo -e "Using the original system to compile the kernel."
               sudo ./recompile "${make_args[@]}"
           fi

           output_tags="$(ls -l ${PWD}/${kernel_outpath}/*.tar.gz 2>/dev/null | awk '{print $9}' | grep -oE '[1-9][0-9]{0,2}\.[0-9]{1,3}\.[0-9]+' | xargs | tr "[ ]" "_")"
           echo -e "Output environment variables."
           echo "PACKAGED_OUTPUTTAGS=${output_tags}" >> ${GITHUB_ENV}
           echo "PACKAGED_OUTPUTPATH=${PWD}/${kernel_outpath}" >> ${GITHUB_ENV}
           echo "PACKAGED_OUTPUTDATE=$(date +"%m.%d.%H%M")" >> ${GITHUB_ENV}
           echo "PACKAGED_STATUS=success" >> ${GITHUB_ENV}
           echo -e "PACKAGED_OUTPUTTAGS: ${output_tags}"
           echo -e "PACKAGED_OUTPUTPATH: ${PWD}/${kernel_outpath}"
           echo -e "PACKAGED_OUTPUTDATE: $(date +"%m.%d.%H%M")"
           echo -e "PACKAGED_STATUS: success"
           echo -e "PACKAGED_OUTPUTPATH files list: \n$(ls -lh ${PWD}/${kernel_outpath}/ 2>/dev/null)"

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: kernel_stable
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            The kernel can be used to compile Armbian and OpenWrt.
            The kernel source code comes from: ${{ inputs.kernel_source }}
            The kernel compilation toolchain: ${{ inputs.kernel_toolchain }}
